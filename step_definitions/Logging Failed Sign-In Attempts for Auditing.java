package com.cucumber.steps;

import com.framework.cucumber.TestHarness;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class LoggingFailedSignInSteps extends LoggingPage {

    private TestHarness testHarness = new TestHarness();

    @Given("access to the system's logging and auditing tools")
    public void accessToLoggingAndAuditingTools() {
        accessLoggingTools();
    }

    @When("I attempt to log in to the application using invalid credentials")
    public void attemptLoginWithInvalidCredentials() {
        String invalidUsername = testHarness.getData("LoginData", "InvalidUserName");
        String invalidPassword = testHarness.getData("LoginData", "InvalidPassword");
        enterUserName(invalidUsername);
        enterPassword(invalidPassword);
        clickLoginButton();
    }

    @Then("the login attempt fails and an error message is displayed")
    public void verifyLoginFailureAndErrorMessage() {
        verifyErrorMessageDisplayed();
    }

    @Given("access to the application and its logging system")
    public void accessApplicationAndLoggingSystem() {
        accessApplication();
        accessLoggingSystem();
    }

    @When("I access the system's logging interface to view recent logs")
    public void accessLoggingInterface() {
        openLoggingInterface();
    }

    @Then("the logging interface is accessed successfully")
    public void verifyLoggingInterfaceAccess() {
        verifyLoggingInterfaceAccessed();
    }

    @When("I search for entries related to the failed sign-in attempt")
    public void searchFailedSignInEntries() {
        searchLogEntries("FailedSignIn");
    }

    @Then("an entry for the failed sign-in attempt is found in the logs")
    public void verifyFailedSignInEntryFound() {
        verifyLogEntryFound("FailedSignIn");
    }

    @When("I verify the log entry includes the timestamp of the failed attempt")
    public void verifyLogEntryTimestamp() {
        verifyLogEntryTimestamp();
    }

    @Then("the log entry includes the correct timestamp")
    public void verifyCorrectTimestamp() {
        verifyTimestampCorrect();
    }

    @When("I check that the log entry contains the username used in the failed attempt")
    public void verifyLogEntryUsername() {
        verifyLogEntryUsername();
    }

    @Then("the username is correctly logged in the entry")
    public void verifyCorrectUsernameLogged() {
        verifyUsernameCorrect();
    }

    @When("I ensure that the log entry includes the IP address of the device used")
    public void verifyLogEntryIPAddress() {
        verifyLogEntryIPAddress();
    }

    @Then("the IP address is accurately recorded in the log")
    public void verifyCorrectIPAddressRecorded() {
        verifyIPAddressCorrect();
    }

    @When("I verify that the log entry specifies the reason for the failed attempt \(e.g., incorrect password\)")
    public void verifyLogEntryFailureReason() {
        verifyLogEntryFailureReason();
    }

    @Then("the reason for the failure is clearly stated in the log")
    public void verifyFailureReasonStated() {
        verifyFailureReasonCorrect();
    }

    @When("I check if the log entry is stored in a secure and tamper-proof manner")
    public void verifyLogEntrySecurity() {
        verifyLogEntrySecurity();
    }

    @Then("the log entry is stored securely and cannot be altered")
    public void verifyLogEntryTamperProof() {
        verifyLogEntryTamperProof();
    }

    @When("I validate that the log entry is accessible to authorized personnel only")
    public void verifyLogEntryAccessibility() {
        verifyLogEntryAccessibility();
    }

    @Then("only authorized users can access the log entry")
    public void verifyAuthorizedAccess() {
        verifyAccessRestricted();
    }

    @When("I ensure the log entry is retained for the appropriate duration as per company policy")
    public void verifyLogEntryRetention() {
        verifyLogEntryRetention();
    }

    @Then("the log entry retention period complies with company policy")
    public void verifyRetentionCompliance() {
        verifyRetentionPolicyCompliance();
    }

    @When("I check if the log entry is included in audit reports generated by the system")
    public void verifyLogEntryInAuditReports() {
        verifyLogEntryInAuditReports();
    }

    @Then("the log entry is present in the audit reports")
    public void verifyAuditReportInclusion() {
        verifyAuditReportInclusion();
    }

    @When("I verify that the logging system sends an alert to the security team for multiple failed attempts")
    public void verifyAlertForMultipleFailedAttempts() {
        verifyAlertForMultipleFailedAttempts();
    }

    @Then("the security team receives an alert for repeated failed attempts")
    public void verifySecurityTeamAlert() {
        verifySecurityTeamAlertReceived();
    }

    @When("I ensure that the log entry is formatted consistently with other entries")
    public void verifyLogEntryFormatConsistency() {
        verifyLogEntryFormatConsistency();
    }

    @Then("the log entry follows the same format as other entries")
    public void verifyFormatConsistency() {
        verifyFormatConsistency();
    }

    @When("I test the system's ability to log failed attempts under high load conditions")
    public void testLoggingUnderHighLoad() {
        testLoggingUnderHighLoad();
    }

    @Then("failed attempts are logged correctly even under high load")
    public void verifyLoggingUnderLoad() {
        verifyLoggingUnderLoad();
    }

    @When("I confirm that the logging system can recover and retain entries after a system restart")
    public void verifyLoggingSystemRecovery() {
        verifyLoggingSystemRecovery();
    }

    @Then("log entries are retained and accessible after a system restart")
    public void verifyEntriesAfterRestart() {
        verifyEntriesAfterRestart();
    }
}