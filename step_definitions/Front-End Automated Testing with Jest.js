const { defineStep } = require('cypress-cucumber-preprocessor/steps');

defineStep('Node.js and npm are installed on the system', () => {
  cy.exec('node -v').its('code').should('eq', 0);
  cy.exec('npm -v').its('code').should('eq', 0);
});

defineStep('the front-end project is set up with Jest installed as a dependency', () => {
  cy.readFile('package.json').then((packageJson) => {
    expect(packageJson.devDependencies).to.have.property('jest');
  });
});

defineStep('access to the version control system with appropriate permissions', () => {
  cy.exec('git status').its('code').should('eq', 0);
});

defineStep('I navigate to the front-end project directory', () => {
  cy.exec('cd /path/to/project').its('code').should('eq', 0);
});

defineStep('the terminal should be in the correct project directory', () => {
  cy.exec('pwd').then((result) => {
    expect(result.stdout).to.include('/path/to/project');
  });
});

defineStep('I open the Jest configuration file to verify Jest settings', () => {
  cy.readFile('jest.config.js').should('exist');
});

defineStep('Jest should be correctly configured with the necessary settings for the project', () => {
  cy.readFile('jest.config.js').then((jestConfig) => {
    expect(jestConfig).to.have.property('testEnvironment');
  });
});

defineStep('I create a new test file named ButtonComponent.test.js in the components directory', () => {
  cy.writeFile('components/ButtonComponent.test.js', '// Test content');
});

defineStep('a new test file should be created successfully', () => {
  cy.readFile('components/ButtonComponent.test.js').should('exist');
});

defineStep('I write a test case to check if the ButtonComponent renders correctly', () => {
  cy.writeFile('components/ButtonComponent.test.js', "test('renders correctly', () => {
    // Test implementation
  });");
});

defineStep('the test case should be written to check the rendering of the ButtonComponent', () => {
  cy.readFile('components/ButtonComponent.test.js').should('contain', 'renders correctly');
});

defineStep('I write a test case to simulate a button click event on the ButtonComponent', () => {
  cy.writeFile('components/ButtonComponent.test.js', "test('button click', () => {
    // Test implementation
  });");
});

defineStep('the test case should be written to simulate and verify the button click event', () => {
  cy.readFile('components/ButtonComponent.test.js').should('contain', 'button click');
});

defineStep('I run the Jest test suite using the command npm test', () => {
  cy.exec('npm test').its('code').should('eq', 0);
});

defineStep('Jest should execute all test cases, and results should be displayed in the terminal', () => {
  cy.exec('npm test').its('stdout').should('contain', 'PASS');
});

defineStep('I verify the test results for ButtonComponent in the terminal', () => {
  cy.exec('npm test').its('stdout').should('contain', 'ButtonComponent');
});

defineStep('all test cases for ButtonComponent should pass successfully', () => {
  cy.exec('npm test').its('stdout').should('contain', 'PASS');
});

defineStep('I review the code coverage report generated by Jest', () => {
  cy.exec('npm test -- --coverage').its('stdout').should('contain', 'coverage');
});

defineStep('the code coverage report should show adequate coverage for the ButtonComponent', () => {
  cy.exec('npm test -- --coverage').its('stdout').should('contain', 'ButtonComponent');
});

defineStep('I stage the test file changes for commit using the command git add components/ButtonComponent.test.js', () => {
  cy.exec('git add components/ButtonComponent.test.js').its('code').should('eq', 0);
});

defineStep('the test file changes should be staged successfully', () => {
  cy.exec('git status').its('stdout').should('contain', 'ButtonComponent.test.js');
});

defineStep('I commit the test file to the version control system using the command git commit -m "Add test for ButtonComponent"', () => {
  cy.exec('git commit -m "Add test for ButtonComponent"').its('code').should('eq', 0);
});

defineStep('the test file should be committed successfully', () => {
  cy.exec('git log').its('stdout').should('contain', 'Add test for ButtonComponent');
});

defineStep('I verify the commit by checking the commit history using git log', () => {
  cy.exec('git log').its('stdout').should('contain', 'Add test for ButtonComponent');
});

defineStep('the commit for the test file should be present in the commit history', () => {
  cy.exec('git log').its('stdout').should('contain', 'ButtonComponent');
});

defineStep('I push the committed test file to the remote repository using the command git push origin main', () => {
  cy.exec('git push origin main').its('code').should('eq', 0);
});

defineStep('the test file should be pushed to the remote repository without errors', () => {
  cy.exec('git push origin main').its('stdout').should('contain', 'main');
});

defineStep('I verify the push by checking the remote repository for the latest changes', () => {
  cy.exec('git log').its('stdout').should('contain', 'ButtonComponent');
});

defineStep('the remote repository should reflect the committed test file changes', () => {
  cy.exec('git log').its('stdout').should('contain', 'ButtonComponent');
});

defineStep('I review the remote repository's CI/CD pipeline to ensure the tests are executed automatically', () => {
  cy.exec('curl -s https://ci.example.com/pipeline-status').its('stdout').should('contain', 'success');
});

defineStep('the CI/CD pipeline should execute the tests successfully without errors', () => {
  cy.exec('curl -s https://ci.example.com/pipeline-status').its('stdout').should('contain', 'success');
});

defineStep('I document any issues found during testing and provide feedback to the development team', () => {
  cy.writeFile('issues.txt', 'No issues found');
});

defineStep('all issues should be documented, and feedback should be communicated to the development team', () => {
  cy.readFile('issues.txt').should('contain', 'No issues found');
});